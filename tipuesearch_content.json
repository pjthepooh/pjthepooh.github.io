{"pages":[{"url":"http://www.pjthepooh.com/pages/../about.html","text":"My name is PJ, born and raised in Guangzhou, China . I'm currently a data scientist in Silicon Valley , immersing myself in a world of science and new technology. I truly believe that most great decisions are driven by data. I'm willing to learn as much as I can to become a full-stack data scientist. I love sports such as swimming, basketball, snowboarding and bicycling. To be a better version of myself, I love to travel! My another big interest is teaching. I believe knowledge sharing takes a key role in human society. As a first-generation immigrant in U.S., I would love to contribute my little effort to help the community of Chinese immigrants . I speak Cantonese, Mandarin and English as my second language.","tags":"Life","loc":"http://www.pjthepooh.com/pages/../about.html","title":"About"},{"url":"http://www.pjthepooh.com/fall-off-the-bike.html","text":"Today is a bad day. I fell off my bike (bicycle, not motorcycle), and it was my first time falling off. As I did not have any protection, except my helmet of course, and it was in a pretty damn fast speed, so my legs and knees were bruised. Most sadly, my bike crashed on the ground and the handler was deformed. Yup, I bought a new bike a month ago and was about to ride it to work on a daily basis. This morning I was trying to get familiar with the route from home to the office. It was Market St. There was a bus stoping in front of me blocking half of the road. I wanted to accelerate and pass it on the left (yes right? You know you won't stop if you are on a two-wheeled machine). How the hell I could not know there are muni tracks on the middle of Market St (yes right? I must have been living in the city for too long to notice it). I should have noticed it, or I should have never passed buses like that, at least not on Market St. When I saw that track, it was already too late. I fell off at about 10 feet away from the bus's front wheel. Fortunately, the bus had not moved yet. It was pretty dangerous when I look back it now. For those who know me enough, they know I often watch video clips like \"top 100 car crashes\", \"Fetal car accidents\" or something like that on Youtube, which is kind of weird. I don't know why I like it but I know it reminds me that I need to be always cautious on the road because there are crazy drivers anywhere. They are super dangerous! I loving biking, either bicycle or motorcycle. I'm kind of mad at myself now as not ever having my own motorcycle even although I had a M1 license 6 years ago. I never got any supports when I said \"I'm gonna to buy a bike.\" I understand it not safe and it seems immature in some sense, but should I just be immature at that age? I would not regret even if I fell off from my own bike if I had one, but I kind of regret I have never had one. Gotta fix my bike soon, meh...","tags":"Life","loc":"http://www.pjthepooh.com/fall-off-the-bike.html","title":"Fall Off the Bike"},{"url":"http://www.pjthepooh.com/python_visualization.html","text":"Why? Recently my main analysis tool was switched to python, a language that I have not touched for a year. Remember that the first time I used python was because of an NLP project, which python has great packages to deal with. Then with the popularity of pandas at that time, I started implementing ML models using python; however it would not be my first choice for most of the analyses simply because I could not find a GUI that is interactive enough to prototype my ideas fast. I hate the feeling that when I come to visualization in python I became pretty clumsy. After reading several documents and blogs about python visualization, I started liking it. The tools available in python like Matplotlib, pandas's build-in plotting and seaborn are definitely not any worse than ggplot. I mean it is hard to compare amont these tools and make a conclusion that one is better than other, but it would be nice to tell their strengths and weaknesses and pick the right tool to use quickly when tasks come. I decided to write a post to help me ramp up on this, and hope it helps others. Here are some links to some popular visualization tools: matplotlib pandas seaborn Boekh ggplot plotly In [1]: import pandas as pd import numpy as np import datetime import random import calendar import matplotlib.pyplot as plt % matplotlib inline import seaborn as sns from scipy import stats import warnings warnings . filterwarnings ( 'ignore' ) Generate a dummy dataset The dataset contains two time series values in daily level. In [2]: def get_monday ( date , format = '%Y-%m- %d ' ): ts = datetime . datetime . strptime ( date , format ) mon_ts = ts - datetime . timedelta ( days = int ( ts . strftime ( '%w' )) - 1 ) return mon_ts . strftime ( format ) In [3]: n = 100 np . random . seed ( 123 ) ts = pd . date_range ( pd . datetime . today (), periods = n ) day = ts . strftime ( '%Y-%m- %d ' ) week = [ get_monday ( d ) for d in day ] wday = ts . strftime ( '%A' ) category = [ random . choice ([ 'A' , 'B' , 'C' ]) for x in range ( n )] value1 = [ 10 + 2 * x + float ( np . random . normal ( 0 , n ** 0.5 , 1 )) for x in range ( n )] value2 = [ 10 + 1.5 * x + float ( np . random . normal ( 0 , n ** 0.7 , 1 )) for x in range ( n )] df = pd . DataFrame ({ \"ts\" : ts , \"day\" : day , \"week\" : week , \"wday\" : wday , \"category\" : category , \"value1\" : value1 , \"value2\" : value2 , }) Pandas' build-in plotting Pandas DataFrame and Series has .plot namespace and there are many ployt types available such as hist, line, scatter , barchart and etc. This is definitely provides a quickest way to vizulize the data, epecially when exploring a DataFrame object. In [4]: fig , ax = plt . subplots ( nrows = 1 , ncols = 2 , figsize = [ 16 , 5 ]) df . plot . line ( ax = ax [ 0 ], x = 'day' , y = [ 'value1' , 'value2' ]) df . plot . scatter ( ax = ax [ 1 ], x = 'value1' , y = 'value2' ) plt . tight_layout () In [5]: dfg = df . groupby ([ 'wday' , 'category' ])[ 'value1' ] . agg ([ np . mean , np . std , np . count_nonzero ]) dfg [ 'mean_std' ] = dfg [ 'std' ] / np . sqrt ( dfg [ 'count_nonzero' ] ) x_order = sorted ( df . wday . unique ()) fig , ax = plt . subplots ( 2 , 1 , figsize = [ 16 , 10 ]) _ = dfg . unstack () . plot ( ax = ax [ 0 ], y = 'mean' , kind = 'bar' , yerr = 'mean_std' , ylim = ( 0 , 250 )) ax [ 0 ] . set_xticklabels ( sorted ( df . wday . unique ()), rotation = 0 ) _ = sns . barplot ( ax = ax [ 1 ], data = df , x = 'wday' , y = 'value1' , hue = 'category' , n_boot = 1000 , order = x_order , hue_order = [ 'A' , 'B' , 'C' ]) Matplotlib In [6]: def gen_ax_bar ( ax , data , group , metric , y_col , std_col = None , width = 0.25 , color = [ 'c' , 'g' , 'y' ], xlab = '' , ylab = '' , title = '' , xticklabel = '' ): group_values = data [ group ] . unique () metric_values = data [ metric ] . unique () axes = [] for i in range ( len ( metric_values )): d = data . loc [ lambda x : x [ metric ] == metric_values [ i ], :] width = width ind = np . arange ( d . shape [ 0 ]) + width * ( i ) y = d [ y_col ] if std_col is not None : std = list ( d [ std_col ]) axes . append ( ax . bar ( ind , y , width , color = color [ i ], yerr = std , error_kw = { 'ecolor' : 'black' , 'linewidth' : 1 })) ax . set_xticks ( ind ) ax . set_xticklabels ( group_values ) ax . legend ( axes , metric_values ) ax . set_ylabel ( ylab ) ax . set_xlabel ( xlab ) ax . set_title ( title ) return ax In [7]: df_plt = dfg . reset_index () fig , ax = plt . subplots ( figsize = [ 12 , 5 ]) _ = gen_ax_bar ( ax , df_plt , 'wday' , 'category' , 'mean' , 'mean_std' , color = [ '#00C8F8' , '#FDF200' , '#FFA200' ], xlab = 'Day of week' , ylab = 'Mean of value_1' , title = 'value_1 by Day of week and Category' ) Seaborn I found seaborn is highly integrated with matplotlib and pandas' build-in plotting and it is pretty flexible and powerful. You can make an attractive plot with less than several line of codes. Here are some simple examples. In [8]: fig , ax = plt . subplots ( figsize = [ 16 , 5 ]) sns . barplot ( data = df , x = 'wday' , y = 'value1' , hue = 'category' , ax = ax ) sns . despine () In [9]: sns . set ( style = \"ticks\" ) fig = sns . JointGrid ( data = df , x = 'value1' , y = 'value2' , size = 5 ) _ = fig . plot_joint ( sns . regplot , color = 'g' ) _ = fig . plot_marginals ( sns . distplot , color = 'g' , bins = 15 ) _ = fig . annotate ( lambda r , p : stats . pearsonr ( r , p )[ 0 ] ** 2 , fontsize = 14 , template = '{stat}: {val:.2f}' , stat = '$R&#94;2$' , loc = 'upper left' ) In [10]: fig = sns . FacetGrid ( df , col = 'wday' , hue = 'wday' , col_wrap = 4 ) _ = fig . map ( sns . regplot , 'value1' , 'value2' , ci = None , order = 1 ) In [22]: fig = sns . FacetGrid ( df [ 0 : min ( n , 4 * 7 )], row = 'week' , aspect = 5 , margin_titles = True ) _ = fig . map ( sns . kdeplot , 'value1' , shade = True , color = 'y' ) _ = fig . map ( sns . kdeplot , 'value2' , shade = True , color = 'c' ) _ = fig . set_xlabels ( 'value' ) _ = fig . add_legend () for ax in fig . axes . flat : ax . yaxis . set_visible ( False ) fig . fig . subplots_adjust ( hspace = 0.1 ) sns . despine ( left = True ) In [12]: iris = sns . load_dataset ( \"iris\" ) In [13]: def hexbin ( x , y , color , ** kwargs ): cmap = sns . light_palette ( color , as_cmap = True ) plt . hexbin ( x , y , gridsize = 15 , cmap = cmap , ** kwargs ) fig = sns . FacetGrid ( data = iris , hue = 'species' , col = 'species' ) _ = fig . map ( hexbin , 'sepal_length' , 'sepal_width' , extent = [ 3 , 9 , 1 , 5 ]) In [14]: fig = sns . PairGrid ( iris , hue = 'species' ) _ = fig . map_diag ( plt . hist ) _ = fig . map_offdiag ( plt . scatter ) _ = fig . map_lower ( sns . kdeplot , cmap = \"Blues_d\" , alpha = 0.25 ) _ = fig . add_legend () In practice Here is a simple example in practice. In [15]: from sklearn.ensemble import RandomForestClassifier from sklearn.grid_search import GridSearchCV In [16]: def gen_param_scores ( CV_fitted ): est = CV_fitted scores = est . grid_scores_ rows = [] params = sorted ( scores [ 0 ] . parameters ) for row in scores : mean = row . mean_validation_score std = row . cv_validation_scores . std () rows . append ([ mean , std ] + [ row . parameters [ k ] for k in params ]) scores = pd . DataFrame ( rows , columns = [ 'score_mean' , 'score_std' ] + params ) return scores In [17]: titanic = sns . load_dataset ( 'titanic' ) In [18]: fig , ax = plt . subplots ( figsize = [ 16 , 5 ]) _ = sns . barplot ( data = titanic , x = 'class' , y = 'survived' , hue = 'sex' , ax = ax , ci = None ) In [19]: clf = RandomForestClassifier () param_grid = dict ( max_depth = [ 1 , 2 , 5 , 10 , 20 , 30 , 40 , 50 ], min_samples_split = [ 2 , 5 , 10 ], min_samples_leaf = [ 2 , 3 , 4 , 5 ], ) est = GridSearchCV ( clf , param_grid = param_grid , n_jobs = 4 ) y = titanic [ 'survived' ] X = titanic . drop ([ 'survived' , 'who' , 'alive' ], axis = 1 ) X = pd . get_dummies ( X ) . fillna ( value = X . median ()) tmp = est . fit ( X , y ) In [20]: score_table = gen_param_scores ( est ) params = score_table . columns [ 2 :] fig = sns . factorplot ( x = params [ 0 ], y = 'score_mean' , data = score_table , col = params [ 1 ], hue = params [ 2 ], col_wrap = 2 ) In [21]: print score_table . sort_values ( 'score_mean' , ascending = False ) . head ( 1 ) score_mean score_std max_depth min_samples_leaf min_samples_split 46 0.828283 0.036055 10 5 5","tags":"Data Science","loc":"http://www.pjthepooh.com/python_visualization.html","title":"Python Visualization"},{"url":"http://www.pjthepooh.com/welcome-to-my-new-blog.html","text":"What is PJ the Pooh? This is my nickname created by my girlfriend. This is just my personal page record my life and share my passion. My old habit Time flies. Last time I blogged was when I was in middle school, which is about a decade ago, when Weibo, Facebook and Twitter did not even exist. I was blogging pretty consistently because it helped calm me down as I was in my teenage rebellion period. Of course, the content was mostly about my little things in life and nothing worth to read if you didn't know me. More importantly, it reminds me my old stories even after years. All the images and feelings would emerge whenever I read it again. My life has changed since my family and I moved to U.S, and then I stopped this habit. Why would I blog again? Why not? Besides the main reason that I simply want a home for myself, I do have the following reasons why I want to do this. My own space I have full control of this space, from the server to my words. Stays in touch It is a great place to stay in touch with family and friends who I can't see very often. Gain knowledge Updating blog regularly is a perfect way to stay tuned with the events in my fields. Share knowledge It may help others who search for similar topics. Store my stuff It would be convenient to find my own stuff in one place. To Practice my writing I am a terrible writer so here I come. To connect with like-minded people Hopefully! Anyway, welcome and please keep in touch!","tags":"Life","loc":"http://www.pjthepooh.com/welcome-to-my-new-blog.html","title":"Welcome to My New Blog"}]}